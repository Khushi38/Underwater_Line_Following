import time
import cv2
import numpy as np
import array as arr
import math
def linefollow():
    a = time.time()
    cap = cv2.VideoCapture(r'C:\Users\Welcome\Desktop\linevideo2.mp4')
    while(cap.isOpened()):
      # Capture frame-by-frame
        ret, img = cap.read()
        if ret == True:
            im = np.zeros((img.shape[0],img.shape[1]),dtype = int)
            im = 0.6*img[:,:,0] + 0.2*img[:,:,1] + 0.2*img[:,:,2]
            im = cv2.normalize(im.astype(int), None, 255,0, cv2.NORM_MINMAX, cv2.CV_8UC1)
        #applying sharpnening
            kernel_sharpening =  np.array([[-1,-1,-1], 
                                           [-1, 9,-1],
                                           [-1,-1,-1]])
        
            sharpened = cv2.filter2D(im, -1, kernel_sharpening)
        #applying blur
            img3 = cv2.medianBlur(sharpened,5)
            ret, threshed_img = cv2.threshold(img3,60, 255, cv2.THRESH_BINARY)
            width = threshed_img.shape[0]
            height = threshed_img.shape[1]

            img5 = threshed_img[5:width-5,5:height-5]
            img5 = cv2.dilate(img5,(9,9),iterations=2)
            img5 = 255-img5
            laplacian = cv2.Canny(img5,50,150,apertureSize = 3)
            print(laplacian.shape)
            lines = cv2.HoughLinesP(laplacian, 1, np.pi/180,50,maxLineGap=100)

            #print(lines)
            # for rho,theta in lines[0]:
            if lines is not None:
                for line in lines:
                    x1, y1, x2, y2 = line[0]
                    
                    #print(a,"and",b)
                    cv2.line(img, (x1, y1), (x2, y2), (255, 255, 255), 5)
                    a=arr.array('i',[x1,x2])
                    b=arr.array('i',[y1,y2])
                    c=arr.array('d',[math.sqrt(((x2-x1)**2)+((y2-y1)**2))])
                    print(c)
            cv2.imshow("contours1",img5)
            cv2.imshow("abcd",img)
#             #return(cX,cY)
#             print(cX,"and",cY)
            

            if time.time()-a > 60 :
                break
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break
        else: 
            break
    cv2.destroyAllWindows()
    print(linefollow())
